/** *****************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ***************************************************************************** */
package fr.jmmc.oimaging.gui;

import fr.jmmc.jmcs.gui.component.BasicTableSorter;
import fr.jmmc.jmcs.gui.util.SwingUtils;
import fr.jmmc.oimaging.model.ResultSetTableModelBis;
import fr.jmmc.oimaging.services.ServiceResult;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * @author martin
 */
public class TablePanel extends javax.swing.JPanel {

    /**
     * ResultSet table model
     */
    private final ResultSetTableModelBis resultSetTableModelBis;

    List<String> headers = new ArrayList<>();

    /**
     * Creates new form TablePanel
     */
    public TablePanel() {

        // Build ResultsTable
        resultSetTableModelBis = new ResultSetTableModelBis();
        initComponents();

        BasicTableSorter resultSetTableSorter = new BasicTableSorter(resultSetTableModelBis, jResultSetTable.getTableHeader());
        jResultSetTable.setModel(resultSetTableSorter);
        SwingUtils.adjustRowHeight(jResultSetTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jResultSetTable = new javax.swing.JTable();
        jPanelTableOptions = new javax.swing.JPanel();
        jButtonShowTableEditor = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jResultSetTable.setModel(resultSetTableModelBis);
        jScrollPane1.setViewportView(jResultSetTable);

        jSplitPane1.setRightComponent(jScrollPane1);

        jPanelTableOptions.setLayout(new javax.swing.BoxLayout(jPanelTableOptions, javax.swing.BoxLayout.PAGE_AXIS));
        jSplitPane1.setLeftComponent(jPanelTableOptions);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jButtonShowTableEditor.setText("Table Editor");
        jButtonShowTableEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowTableEditorActionPerformed(evt);
            }
        });
        jPanelTableOptions.add(jButtonShowTableEditor, java.awt.BorderLayout.CENTER);
        }// </editor-fold>//GEN-END:initComponents

    public JTable getTable() {
        return jResultSetTable;
    }

    private ResultSetTableModelBis getTableModel() {
        return resultSetTableModelBis;
    }

    public void addControlComponent(JComponent component) {
        jPanelTableOptions.add(component);
    }

    public void setResults(List<ServiceResult> results) {

        // Exit the method if the result set is empty
        if (results.isEmpty()) return;

        List<String> headers = new ArrayList<>(getTableModel().getHeaders());
        List<Map<String, Object>> values = new ArrayList<>();

        // For each result in the results set, populate all the table values and headers
        results.forEach(result -> {
            // Get all the values
            Map<String, Object> inputKeywordsValue = result.getOifitsFile().getImageOiData().getInputParam().getKeywordsValue();
            Map<String, Object> outputKeywordsValue = result.getOifitsFile().getImageOiData().getOutputParam().getKeywordsValue();

            values.add(new HashMap<>());
            values.get(values.size() - 1).putAll(inputKeywordsValue);
            values.get(values.size() - 1).putAll(outputKeywordsValue);

            Set<String> inputHeaders = inputKeywordsValue.keySet();
            Set<String> outputHeaders = outputKeywordsValue.keySet();

            // Merge the input and output headers in a unique headers list without duplicates
            List<String> newHeaders = Stream.concat(inputHeaders.stream(), outputHeaders.stream()).distinct().collect(Collectors.toList());
            List<String> tempHeaders = new ArrayList<>(headers);

            // Merge the previous combined headers with new ones without duplicates
            headers.clear();
            headers.addAll(Stream.concat(tempHeaders.stream(), newHeaders.stream()).distinct().collect(Collectors.toList()));

            this.headers.clear();
            this.headers.addAll(headers);

        });

        getTableModel().populate(headers, values);
    }

    /**
     * Display the table keywords editor and set the new headers
     */
    public void jButtonShowTableEditorActionPerformed(ActionEvent evt) {

        // Set the dialog box
        JOptionPane jOptionPane = new JOptionPane();
        JDialog dialog = jOptionPane.createDialog("Edit table headers");
        TableEditorPanel tableEditorPanel = new TableEditorPanel(dialog, headers, getTableModel().getHeaders());
        dialog.setContentPane(tableEditorPanel);
        dialog.setSize(400, 250);
        dialog.setVisible(true);

        // Get the new headers returned by the dialog box et redefine the table
        if (!getTableModel().getHeaders().equals(tableEditorPanel.getKeywordsToDisplay())) {
            getTableModel().setHeaders(tableEditorPanel.getKeywordsToDisplay());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelTableOptions;
    private javax.swing.JTable jResultSetTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jButtonShowTableEditor;
    // End of variables declaration//GEN-END:variables

}
