/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.jmmc.oimaging.gui;

import javax.swing.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Panel to be added in a dialog box to edit the display of the table
 * TODO FIX: The headers are cleared if the user presses the close button
 * TODO FIX: Convert lists from List to JList to handle event on double click
 *
 * @author martin
 */
public class TableEditorPanel extends javax.swing.JPanel implements MouseListener {

    private final List<String> availableKeywords = new ArrayList<>();
    private final List<String> keywordsToDisplay = new ArrayList<>();
    private final List<String> keywordsDisplayed = new ArrayList<>();

    // Reference to the parent dialog box to handle its events
    private JDialog dialog;

    // Constructor used for the first iteration of the class TODO
    public TableEditorPanel(JDialog dialog, List<String> availableKeywordsKeywords) {
        this(dialog, availableKeywordsKeywords, null);
    }

    // Constructor used when an edition has already been done
    public TableEditorPanel(JDialog dialog, List<String> availableKeywords, List<String> keywordsDisplayed) {
        initComponents();

        this.dialog = dialog;

        // Add all the results keywords in the list
        this.availableKeywords.clear();
        this.availableKeywords.addAll(availableKeywords);
        for (String keyword : this.availableKeywords) {
            listAvailable.add(keyword);
        }
        jLabelAvailableNb.setText(listAvailable.getItemCount() + " available");

        // Only add keywords if an edition has been done
        this.keywordsDisplayed.clear();
        if (keywordsDisplayed != null) {
            this.keywordsDisplayed.addAll(keywordsDisplayed);
            for (String keyword : this.keywordsDisplayed) {
                listDisplayed.add(keyword);
            }
        }
        else {
            this.keywordsDisplayed.addAll(this.availableKeywords);
        }
        jLabelDisplayedNb.setText(listDisplayed.getItemCount() + " selected");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButtonAdd = new javax.swing.JButton();
        jLabelDisplayed = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jLabelAvailable = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jPanelAvailable = new javax.swing.JPanel();
        jScrollPaneAvailable = new javax.swing.JScrollPane();
        listAvailable = new java.awt.List();
        jPanelDisplayed = new javax.swing.JPanel();
        jScrollPaneDisplayed = new javax.swing.JScrollPane();
        listDisplayed = new java.awt.List();
        jButtonRemove = new javax.swing.JButton();
        jLabelAvailableNb = new javax.swing.JLabel();
        jLabelDisplayedNb = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(400, 250));
        setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(jButtonAdd, gridBagConstraints);

        jLabelDisplayed.setText("Keywords displayed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(jLabelDisplayed, gridBagConstraints);

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        add(jButtonOk, gridBagConstraints);

        jLabelAvailable.setText("Available keywords");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(jLabelAvailable, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(jButtonCancel, gridBagConstraints);

        jPanelAvailable.setLayout(new java.awt.GridBagLayout());

        jScrollPaneAvailable.setViewportView(listAvailable);

        jPanelAvailable.add(jScrollPaneAvailable, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        add(jPanelAvailable, gridBagConstraints);

        jPanelDisplayed.setLayout(new java.awt.GridBagLayout());

        jScrollPaneDisplayed.setViewportView(listDisplayed);

        jPanelDisplayed.add(jScrollPaneDisplayed, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        add(jPanelDisplayed, gridBagConstraints);

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        add(jButtonRemove, gridBagConstraints);

        jLabelAvailableNb.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(jLabelAvailableNb, gridBagConstraints);

        jLabelDisplayedNb.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        add(jLabelDisplayedNb, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        if (listAvailable.getSelectedItem() != null) {
            listDisplayed.add(listAvailable.getSelectedItem());
            jLabelDisplayedNb.setText(listDisplayed.getItemCount() + " selected");
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        if (listDisplayed.getSelectedItem() != null) {
            listDisplayed.remove(listDisplayed.getSelectedItem());
            jLabelDisplayedNb.setText(listDisplayed.getItemCount() + " selected");
        }
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        keywordsToDisplay.addAll(Arrays.asList(listDisplayed.getItems()));
        dialog.dispose();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        keywordsToDisplay.addAll(keywordsDisplayed);
        dialog.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    public List<String> getKeywordsToDisplay() {
        return keywordsToDisplay;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabelAvailable;
    private javax.swing.JLabel jLabelAvailableNb;
    private javax.swing.JLabel jLabelDisplayed;
    private javax.swing.JLabel jLabelDisplayedNb;
    private javax.swing.JPanel jPanelAvailable;
    private javax.swing.JPanel jPanelDisplayed;
    private javax.swing.JScrollPane jScrollPaneAvailable;
    private javax.swing.JScrollPane jScrollPaneDisplayed;
    private java.awt.List listAvailable;
    private java.awt.List listDisplayed;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent mouseEvent) {
        if (mouseEvent.getClickCount() == 2) {
            if (mouseEvent.getSource() == listAvailable) {
                listDisplayed.add(listAvailable.getSelectedItem());
            }
            else if (mouseEvent.getSource() == listDisplayed) {
                listDisplayed.remove(listDisplayed.getSelectedItem());
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent mouseEvent) {
    }

    @Override
    public void mouseReleased(MouseEvent mouseEvent) {
    }

    @Override
    public void mouseEntered(MouseEvent mouseEvent) {
    }

    @Override
    public void mouseExited(MouseEvent mouseEvent) {
    }
}
